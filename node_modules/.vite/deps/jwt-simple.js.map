{
  "version": 3,
  "sources": ["../../jwt-simple/lib/jwt.js", "../../jwt-simple/index.js"],
  "sourcesContent": ["/*\r\n * jwt-simple\r\n *\r\n * JSON Web Token encode and decode module for node.js\r\n *\r\n * Copyright(c) 2011 Kazuhito Hokamura\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * module dependencies\r\n */\r\nvar crypto = require('crypto');\r\n\r\n\r\n/**\r\n * support algorithm mapping\r\n */\r\nvar algorithmMap = {\r\n  HS256: 'sha256',\r\n  HS384: 'sha384',\r\n  HS512: 'sha512',\r\n  RS256: 'RSA-SHA256'\r\n};\r\n\r\n/**\r\n * Map algorithm to hmac or sign type, to determine which crypto function to use\r\n */\r\nvar typeMap = {\r\n  HS256: 'hmac',\r\n  HS384: 'hmac',\r\n  HS512: 'hmac',\r\n  RS256: 'sign'\r\n};\r\n\r\n\r\n/**\r\n * expose object\r\n */\r\nvar jwt = module.exports;\r\n\r\n\r\n/**\r\n * version\r\n */\r\njwt.version = '0.5.6';\r\n\r\n/**\r\n * Decode jwt\r\n *\r\n * @param {Object} token\r\n * @param {String} key\r\n * @param {Boolean} [noVerify]\r\n * @param {String} [algorithm]\r\n * @return {Object} payload\r\n * @api public\r\n */\r\njwt.decode = function jwt_decode(token, key, noVerify, algorithm) {\r\n  // check token\r\n  if (!token) {\r\n    throw new Error('No token supplied');\r\n  }\r\n  // check segments\r\n  var segments = token.split('.');\r\n  if (segments.length !== 3) {\r\n    throw new Error('Not enough or too many segments');\r\n  }\r\n\r\n  // All segment should be base64\r\n  var headerSeg = segments[0];\r\n  var payloadSeg = segments[1];\r\n  var signatureSeg = segments[2];\r\n\r\n  // base64 decode and parse JSON\r\n  var header = JSON.parse(base64urlDecode(headerSeg));\r\n  var payload = JSON.parse(base64urlDecode(payloadSeg));\r\n\r\n  if (!noVerify) {\r\n    if (!algorithm && /BEGIN( RSA)? PUBLIC KEY/.test(key.toString())) {\r\n      algorithm = 'RS256';\r\n    }\r\n\r\n    var signingMethod = algorithmMap[algorithm || header.alg];\r\n    var signingType = typeMap[algorithm || header.alg];\r\n    if (!signingMethod || !signingType) {\r\n      throw new Error('Algorithm not supported');\r\n    }\r\n\r\n    // verify signature. `sign` will return base64 string.\r\n    var signingInput = [headerSeg, payloadSeg].join('.');\r\n    if (!verify(signingInput, key, signingMethod, signingType, signatureSeg)) {\r\n      throw new Error('Signature verification failed');\r\n    }\r\n\r\n    // Support for nbf and exp claims.\r\n    // According to the RFC, they should be in seconds.\r\n    if (payload.nbf && Date.now() < payload.nbf*1000) {\r\n      throw new Error('Token not yet active');\r\n    }\r\n\r\n    if (payload.exp && Date.now() > payload.exp*1000) {\r\n      throw new Error('Token expired');\r\n    }\r\n  }\r\n\r\n  return payload;\r\n};\r\n\r\n\r\n/**\r\n * Encode jwt\r\n *\r\n * @param {Object} payload\r\n * @param {String} key\r\n * @param {String} algorithm\r\n * @param {Object} options\r\n * @return {String} token\r\n * @api public\r\n */\r\njwt.encode = function jwt_encode(payload, key, algorithm, options) {\r\n  // Check key\r\n  if (!key) {\r\n    throw new Error('Require key');\r\n  }\r\n\r\n  // Check algorithm, default is HS256\r\n  if (!algorithm) {\r\n    algorithm = 'HS256';\r\n  }\r\n\r\n  var signingMethod = algorithmMap[algorithm];\r\n  var signingType = typeMap[algorithm];\r\n  if (!signingMethod || !signingType) {\r\n    throw new Error('Algorithm not supported');\r\n  }\r\n\r\n  // header, typ is fixed value.\r\n  var header = { typ: 'JWT', alg: algorithm };\r\n  if (options && options.header) {\r\n    assignProperties(header, options.header);\r\n  }\r\n\r\n  // create segments, all segments should be base64 string\r\n  var segments = [];\r\n  segments.push(base64urlEncode(JSON.stringify(header)));\r\n  segments.push(base64urlEncode(JSON.stringify(payload)));\r\n  segments.push(sign(segments.join('.'), key, signingMethod, signingType));\r\n\r\n  return segments.join('.');\r\n};\r\n\r\n/**\r\n * private util functions\r\n */\r\n\r\nfunction assignProperties(dest, source) {\r\n  for (var attr in source) {\r\n    if (source.hasOwnProperty(attr)) {\r\n      dest[attr] = source[attr];\r\n    }\r\n  }\r\n}\r\n\r\nfunction verify(input, key, method, type, signature) {\r\n  if(type === \"hmac\") {\r\n    return (signature === sign(input, key, method, type));\r\n  }\r\n  else if(type == \"sign\") {\r\n    return crypto.createVerify(method)\r\n                 .update(input)\r\n                 .verify(key, base64urlUnescape(signature), 'base64');\r\n  }\r\n  else {\r\n    throw new Error('Algorithm type not recognized');\r\n  }\r\n}\r\n\r\nfunction sign(input, key, method, type) {\r\n  var base64str;\r\n  if(type === \"hmac\") {\r\n    base64str = crypto.createHmac(method, key).update(input).digest('base64');\r\n  }\r\n  else if(type == \"sign\") {\r\n    base64str = crypto.createSign(method).update(input).sign(key, 'base64');\r\n  }\r\n  else {\r\n    throw new Error('Algorithm type not recognized');\r\n  }\r\n\r\n  return base64urlEscape(base64str);\r\n}\r\n\r\nfunction base64urlDecode(str) {\r\n  return Buffer.from(base64urlUnescape(str), 'base64').toString();\r\n}\r\n\r\nfunction base64urlUnescape(str) {\r\n  str += new Array(5 - str.length % 4).join('=');\r\n  return str.replace(/\\-/g, '+').replace(/_/g, '/');\r\n}\r\n\r\nfunction base64urlEncode(str) {\r\n  return base64urlEscape(Buffer.from(str).toString('base64'));\r\n}\r\n\r\nfunction base64urlEscape(str) {\r\n  return str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\r\n}\r\n", "module.exports = require('./lib/jwt');\r\n"],
  "mappings": "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",
  "names": []
}
